import com.squareup.javapoet.*;
import javax.lang.model.element.Modifier;

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.squareup:javapoet:+'
	}
}

apply from: 'attr-quirks.gradle'

// Most practical API versions according to Android Dashboards:
// - newer then API level 10 (GB 2.3.3, 99.8% of devices)
// - newer than API level 15 (ICS 4.0.3, 95.7% of devices)
// - newer than API level 19 (KK 4.0.3, 60.2% of devices)
task generateSDK19DSL(type: DSLGeneratorTask) { apiLevel = 19 }
task generateSDK15DSL(type: DSLGeneratorTask) { apiLevel = 15 }
task generateSDK10DSL(type: DSLGeneratorTask) { apiLevel = 10 }

task generateDSL(dependsOn: [generateSDK10DSL, generateSDK15DSL, generateSDK19DSL])

class BuilderLock {
	def locked = false
}
MethodSpec.Builder.mixin BuilderLock

class DSLGeneratorTask extends DefaultTask {

	def apiLevel

	@TaskAction
	generate() {
		def attrsBuilder = TypeSpec.classBuilder("DSL")
			.addJavadoc("DSL for creating views and settings their attributes.\n" +
					"This file has been generated by " +
					"{@code gradle generateAPI${apiLevel}DSL}.\n" +
					"It contains views and their setters from API level ${apiLevel}.\n" +
					"Please, don't edit it manually unless for debugging.\n")
			.addModifiers(Modifier.PUBLIC, Modifier.FINAL)
			.superclass(ClassName.get("trikita.anvil", "BaseDSL"))
		def attrMethods = [:]

		forEachView(getAndroidJar(apiLevel)) { view ->
			processViews(attrsBuilder, view)
			forEachMethod(view) { m, name, arg, isListener ->
				attrMethods = processAttrs(attrMethods, view, m, name, arg, isListener)
			}
		}

		finalizeAttrs(attrsBuilder, attrMethods)

		JavaFile.builder("trikita.anvil", attrsBuilder.build())
			.build()
			.writeTo(getProject().file("src/sdk${apiLevel}/java"))
	}

	def getAndroidJar(api) {
		def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
		def sdkDir = ""
		if (localProperties.exists()) {
			Properties properties = new Properties()
			localProperties.withInputStream { instr -> properties.load(instr) }
			sdkDir = properties.getProperty('sdk.dir')
		} else {
			sdkDir = System.getenv('ANDROID_HOME')
		}
		return new File(sdkDir + "/platforms/android-" + api + "/android.jar")
	}

	def forEachView(jarFile, cb) {
		def jar = new java.util.jar.JarFile(jarFile)
		def url = new java.net.URL("jar", "","file:" + jarFile.getAbsolutePath() +"!/")
		def loader = new java.net.URLClassLoader([url] as java.net.URL[], getClass().getClassLoader())
		def viewClass = loader.loadClass("android.view.View")

    for (e in Collections.list(jar.entries()).sort{it.getName()}) {
			if (e.getName().endsWith(".class")) {
				def className = e.getName().replace(".class", "").replace("/", ".")
				// Skip inner classes
				if (className.contains('$')) {
					continue;
				}
				def c = loader.loadClass(className);
				if (viewClass.isAssignableFrom(c)) {
					cb(c)
				}
			}
		}
	}

	def forEachMethod(c, cb) {
		for (m in c.getDeclaredMethods().sort{it.getName()}) {
			if (!java.lang.reflect.Modifier.isPublic(m.getModifiers()) ||
					m.isSynthetic() || m.isBridge()) {
				continue
			}
			if (m.getName().matches('^setOn.*Listener$')) {
				def name = m.getName()
				cb(m, "on"+name.substring(5, name.length()-8),
					m.getParameterTypes()[0], true)
			} else if (m.getName().startsWith('set') && m.getParameterCount() == 1) {
				def name = Character.toLowerCase(m.getName().charAt(3)).toString() +
					m.getName().substring(4)
				cb(m, name, m.getParameterTypes()[0], false)
			}
		}
	}

	//
	// Views generator functions:
	// For each view generates a function that calls v(C), where C is a view
	// class, e.g. FrameLayout.class => frameLayout() { v(FrameLayout.class); }
	//
	def processViews(builder, view) {
		def className = view.getCanonicalName();
		def name = view.getSimpleName()
		if (project.QUIRKS[className]) {
			def alias = project.QUIRKS[className]["__viewAlias"];
			// if the whole view class is banned - do nothing
			if (alias == false) {
				return
			} else if (alias != null) {
				name = alias
			}
		}
		name = toCase(name, {c -> Character.toLowerCase(c)})
		builder.addMethod(MethodSpec.methodBuilder(name)
				.addModifiers(Modifier.PUBLIC, Modifier.STATIC)
				.returns(ClassName.get("trikita.anvil", "DSL", "ViewClassResult"))
				.addStatement("return v(\$T.class)", view)
				.build())
		builder.addMethod(MethodSpec.methodBuilder(name)
				.addParameter(ParameterSpec.builder(ClassName.get("trikita.anvil",
							"Anvil", "Renderable"), "r").build())
				.addModifiers(Modifier.PUBLIC, Modifier.STATIC)
				.returns(TypeName.BOXED_VOID)
				.addStatement("return v(\$T.class, r)", view)
				.build())
	}

	//
	// Attrs generator functions
	//
	def processAttrs(methods, view, m, name, arg, isListener) {
		def fn 
		def key = new MethodKey(name, arg)
		if (isListener) {
			fn = listener(methods.get(key), m)
		} else {
			fn = setter(methods.get(key), m)
		}
		if (fn) {
			methods.put(key, fn)
		}
		return methods
	}

	def finalizeAttrs(builder, methods) {
		methods.sort { it.key.method + " " + it.key.cls.getName() }.each {
			def cls = TypeName.get(it.key.cls).box()
			if (cls.isPrimitive()) {
				cls = c.box()
			}
			def attrFuncType = ClassName.get("trikita.anvil", "Anvil", "AttrFunc")
			def className = toCase(it.key.method, {c -> Character.toUpperCase(c)}) +
				"Func" + Integer.toHexString(cls.hashCode())
			def viewParam =
				ParameterSpec.builder(ClassName.get("android.view", "View"), "v")
				.addModifiers(Modifier.FINAL)
				.build();
			def attrBuilder = TypeSpec.classBuilder(className)
				.addModifiers(Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL)
				.addSuperinterface(ParameterizedTypeName.get(attrFuncType, cls))
			attrBuilder.addField(FieldSpec
					.builder(ClassName.get("", className), "instance")
        .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
        .initializer("new ${className}()")
        .build())
			attrBuilder.addMethod(it.value.build())
			builder.addType(attrBuilder.build())

			def wrapperMethod = MethodSpec.methodBuilder(it.key.method)
				.addModifiers(Modifier.PUBLIC, Modifier.STATIC)
				.addParameter(ParameterSpec.builder(it.key.cls, "arg").build())
				.returns(TypeName.BOXED_VOID)
				.addStatement("return DSL.attr(${className}.instance, arg)")
			builder.addMethod(wrapperMethod.build())
		}
	}

	def attrApplyBuilder(m) {
		def cls = TypeName.get(m.getParameterTypes()[0]).box()
		return MethodSpec.methodBuilder("apply")
			.addModifiers(Modifier.PUBLIC)
			.addParameter(ClassName.get("android.view", "View"), "v")
			.addParameter(ParameterSpec.builder(cls, "arg")
					.addModifiers(Modifier.FINAL).build())
			.addParameter(ParameterSpec.builder(cls, "old")
					.addModifiers(Modifier.FINAL).build())
	}

	def listener(builder, m) {
		if (!builder) {
			builder = attrApplyBuilder(m)
		}

		def className = m.getDeclaringClass().getCanonicalName();
		def listenerClass = m.getParameterTypes()[0];

		def listener = TypeSpec.anonymousClassBuilder("")
			.addSuperinterface(listenerClass)
		listenerClass.getDeclaredMethods().sort {it.getName()}.each { lm ->
			def methodBuilder = MethodSpec.methodBuilder(lm.getName())
				.addModifiers(Modifier.PUBLIC)
				.returns(lm.getReturnType())

			def args = ""
			lm.getParameterTypes().eachWithIndex { v, i ->
				methodBuilder.addParameter(v, "a${i}")
				args += (i != 0 ? ", " : "") + "a${i}"
			}

			if (lm.getReturnType().equals(Void.TYPE)) {
				methodBuilder
					.addStatement("arg.\$L(${args})", lm.getName())
					.addStatement("\$T.render()", ClassName.get("trikita.anvil", "Anvil"))
			} else {
				methodBuilder
					.addStatement("\$T r = arg.\$L(${args})",
						lm.getReturnType(), lm.getName())
					.addStatement("\$T.render()", ClassName.get("trikita.anvil", "Anvil"))
					.addStatement("return r")
			}

			listener.addMethod(methodBuilder.build())
		}

		if (className == "android.view.View") {
			builder = attrApplyBuilder(m)
				.addStatement("v.${m.getName()}(\$L)", listener.build())
			builder.locked = true;
		} else if (!builder.locked) {
			builder
				.beginControlFlow("if (v instanceof \$T)", m.getDeclaringClass())
				.addStatement("((\$T) v).${m.getName()}(\$L)", m.getDeclaringClass(),
					listener.build())
				.endControlFlow();
		}

		return builder
	}

	def setter(builder, m) {
		if (!builder) {
			builder = attrApplyBuilder(m)
		}

		def className = m.getDeclaringClass().getCanonicalName();
		if (project.QUIRKS[className]) {
			def argClass = m.getParameterTypes()[0].getCanonicalName();
			if (project.QUIRKS[className]["${m.getName()}:${argClass}"]) {
				return project.QUIRKS[className]["${m.getName()}:${argClass}"](builder)
			}
			if (project.QUIRKS[className][m.getName()]) {
				return project.QUIRKS[className][m.getName()](builder)
			}
		}

		if (m.getDeclaringClass().getCanonicalName() == "android.view.View") {
			builder = attrApplyBuilder(m)
				.addStatement("v.${m.getName()}(arg)")
			builder.locked = true
		} else if (!builder.locked) {
			builder
				.beginControlFlow("if (v instanceof \$T)", m.getDeclaringClass())
				.addStatement("((\$T) v).${m.getName()}(arg)", m.getDeclaringClass())
				.endControlFlow();
		}

		return builder
	}

	def toCase(s, fn) {
		return fn(s.charAt(0)).toString() + s.substring(1)
	}

	@groovy.transform.EqualsAndHashCode
	class MethodKey {
		String method
		Class cls
		MethodKey(m, c) {
			method = m
			cls = c
		}
	}
}

